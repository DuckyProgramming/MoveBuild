class tierManager{
    constructor(layer,battle){
        this.layer=layer
        this.battle=battle

        this.tiers=[]
        for(let a=0,la=9;a<la;a++){
            this.tiers.push(new group(this.layer,this.battle,this.player,a))
        }
        this.unranked=new group(this.layer,this.battle,this.player,9)
        this.unranked2=new group(this.layer,this.battle,this.player,9)
        this.unranked3=new group(this.layer,this.battle,this.player,9)
        this.cards=[]
        for(let a=0,la=types.card.length;a<la;a++){
            this.unranked.add(a,0,types.card[a].list<0?0:types.card[a].list>=types.color.card.length?0:types.card[a].list)
            this.unranked2.add(a,1,types.card[a].list<0?0:types.card[a].list>=types.color.card.length?0:types.card[a].list)
            this.unranked3.add(a,2,types.card[a].list<0?0:types.card[a].list>=types.color.card.length?0:types.card[a].list)
        }
        this.anim={tiers:[1,1,1,1,1,1,1,1,1],name:['S+','S','A','B','C','D','F','F-','No'],options:[1,1,1,1,1,1,1,1,1]}
        this.preTiers=[
            [1127,1222,1233,1235,1236,1244,1245],
            [13,20,26,41,51,59,63,71,79,84,96,122,127,166,177,199,204,209,277,289,290,306,323,330,335,363,378,389,405,406,453,455,470,479,490,537,555,559,560,566,568,571,572,638,654,666,675,684,686,687,729,756,759,772,784,792,795,815,825,827,828,837,875,883,898,905,918,931,932,939,944,950,959,961,968,970,971,972,975,977,989,990,1008,1035,1036,1041,1045,1066,1075,1085,1087,1118,1119,1124,1128,1134,1136,1139,1140,1141,1145,1146,1147,1164,1171,1179,1180,1206,1216,1221,1238,1239],
            [16,21,29,33,36,49,52,53,58,62,64,65,81,83,94,102,105,106,107,109,110,116,117,118,125,135,139,140,142,145,148,149,154,155,158,160,174,181,191,213,214,216,222,225,226,227,233,253,263,276,278,280,284,288,301,305,327,336,337,344,345,351,361,365,369,377,379,386,393,395,397,399,403,411,414,418,421,424,432,443,446,447,452,456,459,461,463,464,471,480,483,493,494,509,512,522,532,534,539,541,543,544,553,554,558,564,570,580,584,588,593,623,631,632,637,641,642,653,656,658,659,661,662,667,668,670,673,674,677,681,685,690,692,695,702,708,721,725,726,728,731,732,735,741,743,744,745,749,754,755,771,778,779,781,782,786,794,796,804,808,811,816,817,823,829,830,835,854,860,873,874,880,882,888,890,896,899,900,901,904,906,910,911,922,929,930,954,960,969,974,976,986,994,997,1001,1002,1013,1018,1025,1031,1039,1043,1047,1057,1065,1072,1073,1074,1077,1083,1086,1089,1090,1095,1097,1099,1121,1125,1126,1130,1137,1162,1163,1169,1205,1214,1215],
            [8,11,14,17,24,30,31,34,35,39,40,46,50,69,91,95,97,99,108,123,124,128,130,134,136,144,159,165,182,185,186,190,197,198,202,205,206,220,224,234,235,236,239,240,249,261,264,274,279,285,302,304,316,318,322,324,328,331,332,334,340,342,343,347,352,354,356,357,364,368,372,374,385,387,388,392,396,398,401,407,409,415,422,425,427,430,439,442,445,448,449,457,460,474,475,476,481,488,491,508,510,526,527,535,542,545,546,557,567,569,576,582,585,586,594,595,602,603,604,605,615,616,618,621,624,627,628,636,645,647,649,655,657,665,678,682,693,698,699,712,722,723,724,733,734,738,739,742,748,750,753,757,760,762,763,765,774,775,777,783,785,787,790,791,801,802,810,813,818,820,822,824,834,836,841,842,859,862,876,878,879,881,889,892,894,895,897,909,912,915,917,920,938,940,941,942,949,951,957,958,962,966,967,973,982,983,984,985,993,995,1006,1011,1012,1019,1020,1022,1037,1064,1076,1088,1093,1110,1131,1132,1133,1138,1148,1150,1151,1160,1161,1168,1170,1207,1217,1225,1226,1227,1228],
            [9,10,12,15,18,22,25,28,38,42,43,44,54,60,61,70,72,77,86,90,101,104,120,137,143,146,152,157,164,172,173,180,184,195,200,201,208,210,212,218,223,228,229,231,232,245,247,250,251,254,255,259,265,269,271,272,295,297,299,303,313,317,325,329,333,346,360,362,371,373,380,384,390,402,404,408,410,413,423,434,435,438,441,444,450,451,458,462,477,482,487,492,511,515,520,525,528,536,538,540,550,565,573,574,577,583,587,589,590,591,596,597,598,599,600,613,617,622,629,630,635,640,643,646,648,669,671,680,683,688,694,696,697,703,706,707,709,710,711,713,718,719,727,730,736,740,747,752,758,761,764,766,773,780,788,793,797,798,799,800,803,805,806,807,809,812,814,819,821,826,831,833,843,844,845,846,847,848,849,850,851,852,853,857,858,863,864,865,866,867,868,871,885,887,891,913,914,923,926,933,934,935,936,937,946,952,953,955,956,981,992,1007,1010,1014,1021,1026,1030,1032,1038,1049,1052,1053,1056,1059,1062,1068,1069,1070,1071,1080,1082,1084,1092,1096,1102,1104,1109,1111,1112,1120,1122,1129,1135,1158,1159,1167,1173,1182,1198,1209,1211,1213,1219,1229,1230,1231,1232,1246],
            [1,2,3,23,27,55,66,74,78,80,82,88,100,103,111,113,114,126,129,132,133,138,141,150,153,156,161,163,167,168,169,170,171,175,178,179,187,192,196,203,207,211,221,230,237,241,242,246,257,258,262,266,267,268,270,273,281,282,286,287,293,296,298,300,308,312,314,319,320,321,326,341,349,350,355,366,375,376,381,391,394,400,412,416,420,426,428,429,433,436,440,454,466,469,472,484,498,499,507,513,514,519,521,523,530,533,549,552,562,578,601,606,614,620,625,633,634,639,644,663,672,679,689,691,701,715,720,737,746,751,767,768,769,776,789,832,838,839,840,856,861,869,870,872,884,893,902,903,907,916,921,924,925,945,963,965,978,979,987,988,996,1000,1003,1017,1023,1029,1034,1044,1048,1050,1051,1060,1061,1067,1078,1079,1081,1091,1094,1098,1103,1144,1149,1156,1157,1166,1172,1174,1181,1183,1194,1195,1196,1199,1200,1201,1212,1218,1220,1223,1224,1240,1241,1243],
            [4,5,6,7,19,32,37,45,47,48,56,57,67,68,73,75,76,85,87,89,92,93,98,112,115,119,121,131,147,151,162,176,188,193,215,217,219,238,243,244,248,252,256,260,275,283,291,292,294,307,309,310,311,315,338,339,348,353,358,359,367,383,417,419,431,437,465,473,478,485,486,489,495,496,497,500,501,503,504,505,506,516,517,518,524,531,547,548,551,556,561,563,575,579,581,592,607,608,609,610,611,612,619,626,650,651,652,664,676,700,704,705,714,716,717,770,855,877,886,908,919,927,928,943,947,948,964,980,991,998,999,1004,1009,1016,1024,1028,1033,1040,1046,1054,1055,1058,1063,1101,1107,1108,1123,1142,1143,1152,1153,1154,1155,1165,1175,1177,1178,1186,1188,1189,1192,1197,1202,1208,1210,1242],
            [183,189,194,370,382,467,468,502,529,660,1005,1015,1027,1042,1176,1184,1185,1187,1190,1191,1193,1203,1204,1234,1237,1247],
            [0,1100,1105,1106,1113,1114,1115,1116,1117],
        ]
        //this.loadUpTiers()
    }
    loadUpTiers(){
        for(let a=0,la=this.preTiers.length;a<la;a++){
            for(let b=0,lb=this.preTiers[a].length;b<lb;b++){
                this.tiers[a].add(this.preTiers[a][b],0,types.card[this.preTiers[a][b]].list<0?0:types.card[this.preTiers[a][b]].list>=types.color.card.length?0:types.card[this.preTiers[a][b]].list)
            }
        }
    }
    display(){
        this.layer.background(100)
        this.unranked.display('tier',[-1])
        this.unranked2.display('tier',[0])
        this.unranked3.display('tier',[1])
        this.layer.fill(types.color.card[0].fill)
        this.layer.stroke(types.color.card[0].stroke)
        for(let a=0,la=this.tiers.length;a<la;a++){
            this.layer.strokeWeight(3*this.anim.tiers[a])
            this.layer.rect(26,22+a*28,32*this.anim.tiers[a],20*this.anim.tiers[a],5*this.anim.tiers[a])
        }
        for(let a=0,la=this.anim.options.length;a<la;a++){
            this.layer.strokeWeight(5*this.anim.options[a])
            this.layer.rect(130+a*80,450,64*this.anim.options[a],40*this.anim.options[a],10*this.anim.options[a])
        }
        this.layer.fill(0)
        this.layer.noStroke()
        for(let a=0,la=this.tiers.length;a<la;a++){
            this.layer.textSize(8*this.anim.tiers[a])
            this.layer.text(this.anim.name[a]+' Tier',26,22+a*28-4*this.anim.tiers[a])
            this.layer.text('('+this.tiers[a].cards.length+')',26,22+a*28+4*this.anim.tiers[a])
        }
        for(let a=0,la=this.anim.options.length;a<la;a++){
            this.layer.textSize(10*this.anim.options[a])
            this.layer.text('Put in '+this.anim.name[a]+' Tier',130+a*80,450-5*this.anim.options[a])
            this.layer.text('('+(a+1)+')',130+a*80,450+5*this.anim.options[a])
        }
    }
    update(){
        for(let a=0,la=this.tiers.length;a<la;a++){
            this.anim.tiers[a]=smoothAnim(this.anim.tiers[a],pointInsideBox({position:inputs.rel},{position:{x:26,y:22+a*28},width:32,height:20})&&!this.battle.overlayManager.anyActive,1,1.5,5)
        }
        for(let a=0,la=this.anim.options.length;a<la;a++){
            this.anim.options[a]=smoothAnim(this.anim.options[a],pointInsideBox({position:inputs.rel},{position:{x:130+a*80,y:450},width:64,height:40})&&!this.battle.overlayManager.anyActive,1,1.5,5)
        }
        this.unranked.update('tier')
        this.unranked2.update('tier')
        this.unranked3.update('tier')
    }
    onClick(){
        for(let a=0,la=this.tiers.length;a<la;a++){
            if(pointInsideBox({position:inputs.rel},{position:{x:26,y:22+a*28},width:32,height:20})){
                this.battle.overlayManager.overlays[a][0].active=true
                this.battle.overlayManager.overlays[a][0].activate()
            }
        }
        for(let a=0,la=this.anim.options.length;a<la;a++){
            if(pointInsideBox({position:inputs.rel},{position:{x:130+a*80,y:450},width:64,height:40})){
                this.unranked.send(this.tiers[a].cards,0,1)
                this.unranked2.cards.splice(0,1)
                this.unranked3.cards.splice(0,1)
            }
        }
    }
    onKey(key,code){
        for(let a=0,la=this.anim.options.length;a<la;a++){
            if((int(key)+9)%10==a){
                this.unranked.send(this.tiers[a].cards,0,1)
                this.unranked2.cards.splice(0,1)
                this.unranked3.cards.splice(0,1)
            }
        }
    }
}